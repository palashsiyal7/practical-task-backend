openapi: 3.0.3
info:
  title: Actowiz API
  description: API for the Actowiz application
  version: 1.0.0
  contact:
    email: support@actowiz.com
servers:
  - url: http://localhost:8000
    description: Development server
tags:
  - name: Auth
    description: Authentication operations
  - name: Text
    description: Text submission operations
  - name: Users
    description: User management operations

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithToken'
        '400':
          description: User already exists or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticate a user and receive a JWT token
      operationId: loginUser
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithToken'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/user:
    get:
      tags:
        - Auth
      summary: Get current user
      description: Get details of the currently authenticated user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/text/submit:
    post:
      tags:
        - Text
      summary: Submit text
      description: Submit text that will be saved and broadcast to other users
      operationId: submitText
      security:
        - bearerAuth: []
      requestBody:
        description: Text submission
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextSubmissionRequest'
      responses:
        '201':
          description: Text submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextSubmission'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/text/submissions:
    get:
      tags:
        - Text
      summary: Get text submissions
      description: Get all text submissions (sorted by most recent)
      operationId: getTextSubmissions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of text submissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TextSubmission'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Get a list of all users (admin only)
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - requires admin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/statistics:
    get:
      tags:
        - Users
      summary: Get system statistics
      description: Get statistics about users and submissions (admin only)
      operationId: getSystemStatistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatistics'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - requires admin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get a specific user by their ID (admin only)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - requires admin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user by their ID (admin only)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User removed
        '400':
          description: Bad request - e.g., admin cannot delete their own account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - requires admin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}/role:
    put:
      tags:
        - Users
      summary: Update user role
      description: Update a user's role (admin only)
      operationId: updateUserRole
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: New role for the user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, developer, user]
                  example: developer
              required:
                - role
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - e.g., invalid role or admin changing own role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - requires admin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authorization

  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: securePassword123
        role:
          type: string
          enum: [admin, developer, user]
          default: user
          example: user
      required:
        - email
        - password

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: securePassword123
      required:
        - email
        - password

    User:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          enum: [admin, developer, user]
          example: developer

    UserWithToken:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    TextSubmissionRequest:
      type: object
      properties:
        text:
          type: string
          example: This is a sample text submission
      required:
        - text

    TextSubmission:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        userId:
          oneOf:
            - type: string
              example: 60d21b4667d0d8992e610c86
            - $ref: '#/components/schemas/User'
        text:
          type: string
          example: This is a sample text submission
        createdAt:
          type: string
          format: date-time
          example: 2023-02-25T12:00:00Z

    SystemStatistics:
      type: object
      properties:
        totalUsers:
          type: integer
          example: 42
        textSubmissions:
          type: integer
          example: 156
        activeSessions:
          type: integer
          example: 10

    Error:
      type: object
      properties:
        message:
          type: string
          example: Something went wrong 